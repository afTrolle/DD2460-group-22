package exercise;

// Implement the Node class of LinkedList
// Add annotations to the methods and field
// Alice, Bob and Chuck expresse concern about the content of the list.
//   The list contains some of their private data so each of them wants
//   to keep the data private.
// Alice, Bob and Chuck allow each other to know how many elements are in the list 
// Complete the code and add annotations and declassification where needed

public class  Node2  authority (Alice, Bob, Chuck) {

	public int {Alice->Alice;Chuck->Chuck;Bob->Bob} value;
	public Node2 {Alice->Chuck&Bob&Alice;Bob->Alice&Chuck&Bob;Chuck->Bob&Alice&Chuck} next;

	public Node2(int {Alice->Alice;Chuck->Chuck;Bob->Bob}value) {
		this.value = value;
	}

	public void add{Alice->Chuck&Bob&Alice;Bob->Alice&Chuck&Bob;Chuck->Bob&Alice&Chuck}(int {Alice->Alice;Chuck->Chuck;Bob->Bob} value)  {
		try {
			next.add(value);
		} catch (NullPointerException ex) {
			next = new Node2(value);
		}
	}


	public int{Alice->Chuck&Bob&Alice;Bob->Alice&Chuck&Bob;Chuck->Bob&Alice&Chuck} length() {
		try {
			return next.length() + 1;
		} catch (Exception e) {
			return 0;
		}
	}

	public int get(int {Alice->Chuck&Bob&Alice;Bob->Alice&Chuck&Bob;Chuck->Bob&Alice&Chuck}i) : {Alice->Alice;Chuck->Chuck;Bob->Bob} throws Exception {
		if (i < 0){
			new Exception("Negative number");
		} 
		Node2 nextTemp = this;
		for (int j = 0; j < i; j++){
			nextTemp = nextTemp.next;
		}
		return nextTemp.value;
	}


	
	public int {Alice->Alice&Bob&Chuck; Bob->Alice&Bob&Chuck; Chuck->Alice&Bob&Chuck} mean {*->Alice,Bob,Chuck} ()   {
		Node2 node = this;
		int total = 0;
		int count = 0;
		while (node != null) {
			count += 1;
			total += node.value;
			node = node.next;
		}
	
		
		try {
			return total / count;
		} catch (Exception e){
			return -1;
		}
	}



	public int {Alice->Chuck;Bob->Chuck;Chuck->Chuck} discloseMeanToChuck{*->_} () where authority (Alice,Bob,Chuck) {
		int mean = declassify( mean(), {*->Alice&Bob&Chuck} to {Alice->Chuck;Bob->Chuck; Chuck->Chuck}  ) ;
		return mean;
	}


	public int {Chuck->Chuck} transferMeanToChuck{*->_} () where authority (Alice,Bob,Chuck)  {
		int mean = declassify( discloseMeanToChuck(), {Alice->Chuck;Bob->Chuck; Chuck->Chuck} to {Chuck->Chuck});
		return mean;
	}
	
}
