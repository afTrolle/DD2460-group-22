
C:\Users\alexa\Documents\DD2460-group-22\JPF\exercise\queue\queue-do_wait\src>REM

C:\Users\alexa\Documents\DD2460-group-22\JPF\exercise\queue\queue-do_wait\src>REM overly simplified batch file to start JPF from a command prompt 

C:\Users\alexa\Documents\DD2460-group-22\JPF\exercise\queue\queue-do_wait\src>REM
JavaPathfinder core system v8.0 - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
ProdCons.main()

====================================================== search started: 5/7/18 4:40 PM

====================================================== error 1
gov.nasa.jpf.vm.NotDeadlockedProperty
deadlock encountered:
  thread ProdCons$Consumer:{id:2,name:Thread-2,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  thread ProdCons$Producer:{id:3,name:Thread-3,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  thread ProdCons$Consumer:{id:4,name:Thread-4,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3157 insn w/o sources]
  ProdCons.java:33               : q = new Queue(Q_SIZE);
      [1 insn w/o sources]
  Queue.java:2                   : public class Queue {
      [2 insn w/o sources]
  Queue.java:2                   : public class Queue {
  Queue.java:1                   : /** Fixed-size, blocking queue with atomic multi-element put/remove. */
  ProdCons.java:33               : q = new Queue(Q_SIZE);
  Queue.java:8                   : public Queue(int size) {
      [1 insn w/o sources]
  Queue.java:9                   : assert (size <= Integer.MAX_VALUE / 2);
  Queue.java:10                  : data = new byte[size];
  Queue.java:11                  : this.size = size;
  Queue.java:12                  : p = 0;
  Queue.java:13                  : c = 0;
  Queue.java:14                  : }
  ProdCons.java:33               : q = new Queue(Q_SIZE);
  ProdCons.java:34               : for (int i = 0; i < N; i++) {
  ProdCons.java:35               : new Producer(i).start();
  ProdCons.java:13               : Producer(int i) {
      [145 insn w/o sources]
  ProdCons.java:14               : data = new byte[]{(byte)i, (byte)(i + DELTA)};
  ProdCons.java:15               : }
  ProdCons.java:35               : new Producer(i).start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  ProdCons.java:36               : new Consumer().start();
      [1 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
      [1 insn w/o sources]
  ProdCons.java:22               : static class Consumer extends Thread {
      [2 insn w/o sources]
  ProdCons.java:22               : static class Consumer extends Thread {
  ProdCons.java:1                : /** Class to test queue. */
  ProdCons.java:36               : new Consumer().start();
  ProdCons.java:22               : static class Consumer extends Thread {
      [27 insn w/o sources]
------------------------------------------------------ transition #3 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
      [119 insn w/o sources]
  ProdCons.java:22               : static class Consumer extends Thread {
  ProdCons.java:36               : new Consumer().start();
      [1 insn w/o sources]
------------------------------------------------------ transition #4 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  ProdCons.java:34               : for (int i = 0; i < N; i++) {
  ProdCons.java:35               : new Producer(i).start();
  ProdCons.java:13               : Producer(int i) {
      [27 insn w/o sources]
------------------------------------------------------ transition #5 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/3,isCascaded:false}
      [119 insn w/o sources]
  ProdCons.java:14               : data = new byte[]{(byte)i, (byte)(i + DELTA)};
  ProdCons.java:15               : }
  ProdCons.java:35               : new Producer(i).start();
      [1 insn w/o sources]
------------------------------------------------------ transition #6 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/4,isCascaded:false}
      [2 insn w/o sources]
  ProdCons.java:36               : new Consumer().start();
  ProdCons.java:22               : static class Consumer extends Thread {
      [27 insn w/o sources]
------------------------------------------------------ transition #7 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/4,isCascaded:false}
      [119 insn w/o sources]
  ProdCons.java:22               : static class Consumer extends Thread {
  ProdCons.java:36               : new Consumer().start();
      [1 insn w/o sources]
------------------------------------------------------ transition #8 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/5,isCascaded:false}
      [2 insn w/o sources]
  ProdCons.java:34               : for (int i = 0; i < N; i++) {
  ProdCons.java:38               : }
  ProdCons.java:3                : public class ProdCons {
------------------------------------------------------ transition #9 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,1/4,isCascaded:false}
      [1 insn w/o sources]
  ProdCons.java:1                : /** Class to test queue. */
  ProdCons.java:18               : q.put(data);
------------------------------------------------------ transition #10 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/4,isCascaded:false}
  ProdCons.java:18               : q.put(data);
  Queue.java:18                  : int len = items.length;
  Queue.java:19                  : assert (len <= size);
  Queue.java:21                  : while (p + len > c + size) {
  Queue.java:27                  : assert (p + len <= c + size) :
  Queue.java:29                  : for (int i = 0; i < len; i++) {
  Queue.java:30                  : data[p++ % size] = items[i];
  Queue.java:29                  : for (int i = 0; i < len; i++) {
  Queue.java:30                  : data[p++ % size] = items[i];
  Queue.java:29                  : for (int i = 0; i < len; i++) {
  Queue.java:32                  : assert (p <= c + size) :
  Queue.java:34                  : notifyAll(); // wake up waiting consumers
      [2 insn w/o sources]
  Queue.java:35                  : }
  ProdCons.java:19               : }
  ProdCons.java:4                : static final int DELTA = 16;
------------------------------------------------------ transition #11 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,1/3,isCascaded:false}
      [1 insn w/o sources]
  ProdCons.java:1                : /** Class to test queue. */
  ProdCons.java:24               : byte[] result = new byte[2];
  ProdCons.java:25               : q.remove(result);
------------------------------------------------------ transition #12 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/3,isCascaded:false}
  ProdCons.java:25               : q.remove(result);
  Queue.java:54                  : int len = storage.length;
  Queue.java:55                  : waitForData(len);
  Queue.java:39                  : assert (len <= size);
  Queue.java:42                  : wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #13 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,1/2,isCascaded:false}
      [1 insn w/o sources]
  ProdCons.java:1                : /** Class to test queue. */
  ProdCons.java:18               : q.put(data);
------------------------------------------------------ transition #14 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  ProdCons.java:18               : q.put(data);
------------------------------------------------------ transition #15 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  ProdCons.java:18               : q.put(data);
  Queue.java:18                  : int len = items.length;
  Queue.java:19                  : assert (len <= size);
------------------------------------------------------ transition #16 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  Queue.java:19                  : assert (len <= size);
  Queue.java:21                  : while (p + len > c + size) {
------------------------------------------------------ transition #17 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  Queue.java:21                  : while (p + len > c + size) {
------------------------------------------------------ transition #18 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  Queue.java:21                  : while (p + len > c + size) {
------------------------------------------------------ transition #19 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  Queue.java:21                  : while (p + len > c + size) {
  Queue.java:23                  : wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #20 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,1/1,isCascaded:false}
      [1 insn w/o sources]
  ProdCons.java:1                : /** Class to test queue. */
  ProdCons.java:24               : byte[] result = new byte[2];
  ProdCons.java:25               : q.remove(result);
  Queue.java:54                  : int len = storage.length;
  Queue.java:55                  : waitForData(len);
  Queue.java:39                  : assert (len <= size);
  Queue.java:42                  : wait();
      [1 insn w/o sources]

====================================================== snapshot #1
thread ProdCons$Consumer:{id:2,name:Thread-2,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  waiting on: Queue@15e
  call stack:
	at java.lang.Object.wait(Object.java)
	at Queue.waitForData(Queue.java:42)
	at Queue.remove(Queue.java:55)
	at ProdCons$Consumer.run(ProdCons.java:25)

thread ProdCons$Producer:{id:3,name:Thread-3,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  waiting on: Queue@15e
  call stack:
	at java.lang.Object.wait(Object.java)
	at Queue.put(Queue.java:23)
	at ProdCons$Producer.run(ProdCons.java:18)

thread ProdCons$Consumer:{id:4,name:Thread-4,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  waiting on: Queue@15e
  call stack:
	at java.lang.Object.wait(Object.java)
	at Queue.waitForData(Queue.java:42)
	at Queue.remove(Queue.java:55)
	at ProdCons$Consumer.run(ProdCons.java:25)


====================================================== results
error #1: gov.nasa.jpf.vm.NotDeadlockedProperty "deadlock encountered:    thread ProdCons$Consumer:..."

====================================================== statistics
elapsed time:       00:00:00
states:             new=21,visited=0,backtracked=0,end=1
search:             maxDepth=21,constraints=0
choice generators:  thread=21 (signal=2,lock=8,sharedRef=5,threadApi=4,reschedule=2), data=0
heap:               new=397,released=24,maxLive=381,gcCycles=20
instructions:       4064
max memory:         61MB
loaded code:        classes=65,methods=1485

====================================================== search finished: 5/7/18 4:40 PM
