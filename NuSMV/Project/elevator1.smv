---------------------------------------------------------------------------
-- AN ELEVATOR CONTROLLER                                                --
---------------------------------------------------------------------------

-- Original example by Alessandra Giordani from the University of Trento.
-- This SMV program describes an elevator system for a 3-floors building.
-- It includes modules both for the physical system (reservation buttons,
-- cabin, door), and for the controller.

---------------------------------------------------------------------------
-- BUTTON                                                                --
---------------------------------------------------------------------------

-- For each floor there is a button to request service, that can be
-- pressed. A pressed button stays pressed unless reset by the
-- controller. A button that is not pressed can become pressed
-- nondeterministically.

MODULE Button(reset)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
        pressed & reset  : FALSE;
        pressed & !reset : TRUE;
        !pressed         : {FALSE,TRUE};
      esac;

  -- REQ: The controller must not reset a button that is not pressed.
  LTLSPEC G (reset -> pressed);

---------------------------------------------------------------------------
-- CABIN                                                                 --
---------------------------------------------------------------------------

-- The cabin can be at any floor between 1 and 3. It is equipped with an
-- engine that has a direction of motion, that can be either stopped, up
-- or down.

MODULE Cabin(direction)
  DEFINE N:=3;

  VAR
    floor     : 1..N;

  ASSIGN
    next(floor) :=
      case
        next(direction) = stop : floor;
        next (direction) = up : case
          floor = N : floor;
          TRUE : floor + 1; 
        esac; 
        next(direction) = down : case
          floor = 1 : floor;
          TRUE : floor - 1;
        esac;
      esac;

  -- REQ: The cabin can move up only if the floor is not N.
  LTLSPEC G( direction = up -> floor < N);
  -- REQ: The cabin can move down only if the floor is not 1.
  LTLSPEC G( direction = down -> floor > 1 );



---------------------------------------------------------------------------
-- DOOR                                                                  --
---------------------------------------------------------------------------

-- The cabin is also equipped with a door, that can be either open
-- or closed. The door can receive either open, close or nop commands
-- from the controller, and it responds opening, closing, or
-- preserving the current state.

MODULE Door(door_cmd)
  VAR
    status : { open, closed };

  ASSIGN
    next(status) :=
      case
        door_cmd = open      : open;
        door_cmd = close     : closed;
        door_cmd = nop       : status;
      esac;

  -- REQ: The controller can issue an open command only if the door is closed.
  LTLSPEC  G( door_cmd = open -> status = closed );
  -- REQ: The controller can issue a close command only if the door is open.
  LTLSPEC G ( door_cmd = close -> status = open );



---------------------------------------------------------------------------
-- CONTROLLER                                                            --
---------------------------------------------------------------------------

-- The controller takes in input (as sensory signals) the floor and the
-- direction of motion of the cabin, the status of the door, and the
-- status of the four buttons. It decides the controls to the engine, to
-- the door and to the buttons.

MODULE CTRL(floor, door, pressed_1, pressed_2, pressed_3)
  VAR
    direction : {up, down, stop};
    door_cmd : {open, close, nop};
    reset_1 : boolean;
    reset_2 : boolean;
    reset_3 : boolean;

  -- Button N is reset only if it is pressed, we are at floor N, and
  -- the door is open.
  ASSIGN
    reset_1 := (pressed_1 & floor = 1 & door = open);
    reset_2 := (pressed_2 & floor = 2 & door = open);
    reset_3 := (pressed_3 & floor = 3 & door = open);

  -- Check whether there are pending requests at the current floor,
  -- at a higher floor, and at a lower floor.
  DEFINE
    pending_here := (floor = 1 & pressed_1) | ((floor) = 2 & pressed_2) |
                    ((floor) = 3 & pressed_3);

    pending_up   := ((floor) = 1 & (pressed_2 | pressed_3)) |
                    ((floor) = 2 & pressed_3);

    pending_down := ((floor) = 3 & (pressed_1 | pressed_2)) |
                    ((floor) = 2 & pressed_1) ;

  -- * If the cabin is moving, do not send commands to the door.
  -- * If there is a pending request at the current floor and
  --   the door is closed, open it.
  -- * If there are pending requests at different floors and the
  --   door is open, close it.
  -- * Otherwise, do not send commands to the door.
  ASSIGN
    door_cmd := case
      direction != stop : nop;
	    pending_here & door = closed : open;
      (pending_up| pending_down ) & door = open : close;
      TRUE: nop;
      esac;

  -- Variable "last_dir" records the last movement direction of the cabin.
  VAR
    last_dir : {up,down};
  ASSIGN
    next(last_dir) :=
      case
        direction = stop : last_dir;
        TRUE             : direction;
      esac;

  -- * If the door is open, do not send move commands to the cabin.
  -- * If there is a pending request at the current floor
  --   and the cabin is moving, stop it.
  -- * If there are pending requests both at higher and at lower floors,
  --   keep moving in "last_dir".
  -- * If there are pending requests at higher (lower) floors,
  --   move up (down).
  -- * Otherwise, do not send commands to the cabin.
  ASSIGN
   -- init(direction) := stop;
  direction := case
      door = open : stop;
      pending_here  : stop;
      (pending_down & pending_up) : last_dir;
      pending_up : up;
      pending_down : down;
      TRUE: stop;
      esac;

  -- The cabin needs to stop before it can change direction.
  SPEC AG(direction = up -> AX(direction != down))
  SPEC AG(direction = down -> AX(direction != up))

---------------------------------------------------------------------------
-- MAIN                                                                  --
---------------------------------------------------------------------------

-- The main module shows the connection between modules.

MODULE main
  VAR
    cabin : Cabin(ctrl.direction);
    door  : Door(ctrl.door_cmd);
    button_1 : Button(ctrl.reset_1);
    button_2 : Button(ctrl.reset_2);
    button_3 : Button(ctrl.reset_3);
    ctrl : CTRL(cabin.floor, door.status,
                button_1.pressed, button_2.pressed,
                button_3.pressed);



---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

  DEFINE isNoButtonPressed := (!button_1.pressed & !button_2.pressed & !button_3.pressed);

  -- The controller must satisfy the following requirements.

  -- REQ: No button can reach a state where it remains pressed forever.
  LTLSPEC G( button_1.pressed ->  F !button_1.pressed);
  LTLSPEC G( button_2.pressed ->  F !button_2.pressed);
  LTLSPEC G( button_3.pressed ->  F !button_3.pressed);

  -- REQ: No pressed button can be reset until the cabin stops at the
  --      corresponding floor and opens the door.
  LTLSPEC G( ctrl.reset_1 -> cabin.floor = 1 & button_1.pressed & ctrl.direction = stop & door.status = open );
  LTLSPEC G( ctrl.reset_2 -> cabin.floor = 2 & button_2.pressed & ctrl.direction = stop & door.status = open );
  LTLSPEC G( ctrl.reset_3 -> cabin.floor = 3 & button_3.pressed & ctrl.direction = stop & door.status = open );

  -- REQ: A button must be reset as soon as the cabin stops at the
  --      corresponding floor with the door open.
  LTLSPEC G ( cabin.direction = stop & cabin.floor = 1 & door.status = open & button_1.pressed  -> ctrl.reset_1 ) ;
  LTLSPEC G ( cabin.direction = stop & cabin.floor = 2 & door.status = open & button_2.pressed  -> ctrl.reset_2 ) ;
  LTLSPEC G ( cabin.direction = stop & cabin.floor = 3 & door.status = open & button_3.pressed  -> ctrl.reset_3 ) ;

  -- REQ: The cabin can move only when the door is closed.
  LTLSPEC G( cabin.direction = down -> door.status = closed);
  LTLSPEC G( cabin.direction = up -> door.status = closed);
  -- REQ: If no button is pressed, the controller must issue no commands
  --      and the cabin must be stopped.
  LTLSPEC G( isNoButtonPressed = TRUE -> cabin.direction = stop & ctrl.door_cmd = nop);



---------------------------------------------------------------------------



/-- Validation, documentation

Faulty Model

We got the model to look similar by using next from reset which created some sort of locking so that the button never got pushed.
We tought it was wierd that we didn't get and recrusive error. 
When assign next of pressed was called we added next to try and stop the loop that we button was reset and someone presses the button so the door open and closes for infinity.

MODULE Button(reset)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
        pressed & next(reset)  : FALSE;
        pressed & next(!reset) : TRUE;
        !pressed         : {FALSE,TRUE};
      esac;

LTLSPEC (button_3.pressed);

-- specification button_3.pressed  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample
Trace Type: Counterexample
  -- Loop starts here
  -> State: 1.1 <-
    cabin.floor = 1
    door.status = open
    button_1.pressed = FALSE
    button_2.pressed = FALSE
    button_3.pressed = FALSE
    sensor = FALSE
    ctrl.direction = stop
    ctrl.door_cmd = nop
    ctrl.reset_1 = FALSE
    ctrl.reset_2 = FALSE
    ctrl.reset_3 = FALSE
    ctrl.last_dir = up
    isNoButtonPressed = TRUE
    cabin.N = 3
    ctrl.pending_down = FALSE
    ctrl.pending_up = FALSE
    ctrl.pending_here = FALSE
  -> State: 1.2 <-

or

SPEC EX (button_3.pressed);

- specification EG button_3.pressed  is false
-- as demonstrated by the following execution sequence
Trace Description: CTL Counterexample
Trace Type: Counterexample
  -> State: 1.1 <-
    cabin.floor = 1
    door.status = open
    button_1.pressed = FALSE
    button_2.pressed = FALSE
    button_3.pressed = FALSE
    sensor = FALSE
    ctrl.direction = stop
    ctrl.door_cmd = nop
    ctrl.reset_1 = FALSE
    ctrl.reset_2 = FALSE
    ctrl.reset_3 = FALSE
    ctrl.last_dir = up
    isNoButtonPressed = TRUE
    cabin.N = 3
    ctrl.pending_down = FALSE
    ctrl.pending_up = FALSE
    ctrl.pending_here = FALSE


Faulty property

  Incorrectly wrote that if the button1 is pressed then in the next state that is should be reset always in the state after.
  which is incorrect we see for example even when the elevator is already on that floor. That the button is clicked in state
  -> State: 1.2 <- and turned false in -> State: 1.4 <-. 
  It will take even more states when the elevator is on another floor so we will have to say that evenutally it will be false.
  We just cant say exatly in which state it will be false.

  LTLSPEC G (button_1.pressed -> X !button_1.pressed);

-- specification  G (button_1.pressed ->  X !button_1.pressed)  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample
Trace Type: Counterexample
  -> State: 1.1 <-
    cabin.floor = 1
    door.status = closed
    button_1.pressed = FALSE
    button_2.pressed = FALSE
    button_3.pressed = FALSE
    ctrl.direction = stop
    ctrl.door_cmd = nop
    ctrl.reset_1 = FALSE
    ctrl.reset_2 = FALSE
    ctrl.reset_3 = FALSE
    ctrl.last_dir = up
    isNoButtonPressed = TRUE
    cabin.N = 3
    ctrl.pending_down = FALSE
    ctrl.pending_up = FALSE
    ctrl.pending_here = FALSE
  -> State: 1.2 <-
    button_1.pressed = TRUE
    ctrl.door_cmd = open
    isNoButtonPressed = FALSE
    ctrl.pending_here = TRUE
  -- Loop starts here
  -> State: 1.3 <-
    door.status = open
    ctrl.door_cmd = nop
    ctrl.reset_1 = TRUE
  -> State: 1.4 <-
    button_1.pressed = FALSE
    ctrl.reset_1 = FALSE
    isNoButtonPressed = TRUE
    ctrl.pending_here = FALSE
  -> State: 1.5 <-
    button_1.pressed = TRUE
    ctrl.reset_1 = TRUE
    isNoButtonPressed = FALSE
    ctrl.pending_here = TRUE

--/
