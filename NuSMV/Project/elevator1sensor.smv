-- AN ELEVATOR CONTROLLER ---------------------------------------------------------------------------

-- Original example by Alessandra Giordani from the University of Trento.
-- This SMV program describes an elevator system for a 3-floors building.
-- It includes modules both for the physical system (reservation buttons,
-- cabin, door), and for the controller.

---------------------------------------------------------------------------
-- BUTTON                                                                --
---------------------------------------------------------------------------

-- For each floor there is a button to request service, that can be
-- pressed. A pressed button stays pressed unless reset by the
-- controller. A button that is not pressed can become pressed
-- nondeterministically.

MODULE Button(reset)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
        pressed & reset  : FALSE;
        pressed & !reset : TRUE;
        !pressed         : {FALSE,TRUE};
      esac;

  -- REQ: The controller must not reset a button that is not pressed.
  LTLSPEC G (reset -> pressed);

---------------------------------------------------------------------------
-- CABIN                                                                 --
---------------------------------------------------------------------------

-- The cabin can be at any floor between 1 and 3. It is equipped with an
-- engine that has a direction of motion, that can be either stopped, up
-- or down.

MODULE Cabin(direction)
  DEFINE N:=3;

  VAR
    floor     : 1..N;

  ASSIGN
    next(floor) :=
      case
        next(direction) = stop : floor;
        next (direction) = up : case
          floor = N : floor;
          TRUE : floor + 1; 
        esac; 
        next(direction) = down : case
          floor = 1 : floor;
          TRUE : floor - 1;
        esac;
      esac;

  -- REQ: The cabin can move up only if the floor is not N.
  LTLSPEC G( direction = up -> floor < N);
  -- REQ: The cabin can move down only if the floor is not 1.
  LTLSPEC G( direction = down -> floor > 1 );



---------------------------------------------------------------------------
-- DOOR                                                                  --
---------------------------------------------------------------------------

-- The cabin is also equipped with a door, that can be either open
-- or closed. The door can receive either open, close or nop commands
-- from the controller, and it responds opening, closing, or
-- preserving the current state.

MODULE Door(door_cmd, sensor)
  VAR
    status : { open, closed };

  ASSIGN
    next(status) :=
      case
        door_cmd = open      : open;
        door_cmd = close & !sensor     : closed;
        door_cmd = close & sensor : open;
        door_cmd = nop       : status;
      esac;

  -- REQ: The controller can issue an open command only if the door is closed.
  LTLSPEC  G( door_cmd = open -> status = closed );
  -- REQ: The controller can issue a close command only if the door is open.
  LTLSPEC G ( door_cmd = close -> status = open );
  -- Property: The door never closes when the sensor is on.
  LTLSPEC G (sensor = TRUE & status = open -> !(next(status) = closed))



---------------------------------------------------------------------------
-- CONTROLLER                                                            --
---------------------------------------------------------------------------

-- The controller takes in input (as sensory signals) the floor and the
-- direction of motion of the cabin, the status of the door, and the
-- status of the four buttons. It decides the controls to the engine, to
-- the door and to the buttons.

-- Modifications: Add a non-deterministic variable sensor to the controller.

MODULE CTRL(floor, door, pressed_1, pressed_2, pressed_3, sensor)
  VAR
    direction : {up, down, stop};
    door_cmd : {open, close, nop};
    reset_1 : boolean;
    reset_2 : boolean;
    reset_3 : boolean;
    

  -- Button N is reset only if it is pressed, we are at floor N, and
  -- the door is open.
  ASSIGN
    reset_1 := (pressed_1 & floor = 1 & door = open);
    reset_2 := (pressed_2 & floor = 2 & door = open);
    reset_3 := (pressed_3 & floor = 3 & door = open);

  -- Check whether there are pending requests at the current floor,
  -- at a higher floor, and at a lower floor.
  DEFINE
    pending_here := (floor = 1 & pressed_1) | ((floor) = 2 & pressed_2) |
                    ((floor) = 3 & pressed_3);

    pending_up   := ((floor) = 1 & (pressed_2 | pressed_3)) |
                    ((floor) = 2 & pressed_3);

    pending_down := ((floor) = 3 & (pressed_1 | pressed_2)) |
                    ((floor) = 2 & pressed_1) ;

  -- * If the cabin is moving, do not send commands to the door.
  -- * If there is a pending request at the current floor and
  --   the door is closed, open it.
  -- * If there are pending requests at different floors and the
  --   door is open, close it.
  -- * Otherwise, do not send commands to the door.
  ASSIGN
    door_cmd := case
      direction != stop : nop;
	    pending_here & door = closed : open;
      (pending_up| pending_down ) & door = open : close;
      TRUE: nop;
      esac;

  -- Variable "last_dir" records the last movement direction of the cabin.
  VAR
    last_dir : {up,down};
  ASSIGN
    next(last_dir) :=
      case
        direction = stop : last_dir;
        TRUE             : direction;
      esac;

  ASSIGN
    next(sensor) :=
      case
        door = open   : {FALSE, TRUE};
        door = closed : FALSE;
        TRUE                 : FALSE;
      esac;

  -- * If the door is open, do not send move commands to the cabin.
  -- * If there is a pending request at the current floor
  --   and the cabin is moving, stop it.
  -- * If there are pending requests both at higher and at lower floors,
  --   keep moving in "last_dir".
  -- * If there are pending requests at higher (lower) floors,
  --   move up (down).
  -- * Otherwise, do not send commands to the cabin.
  ASSIGN
   -- init(direction) := stop;
  direction := case
      door = open : stop;
      pending_here  : stop;
      (pending_down & pending_up) : last_dir;
      pending_up : up;
      pending_down : down;
      TRUE: stop;
      esac;

  -- The cabin needs to stop before it can change direction.
  SPEC AG(direction = up -> AX(direction != down))
  SPEC AG(direction = down -> AX(direction != up))

---------------------------------------------------------------------------
-- MAIN                                                                  --
---------------------------------------------------------------------------

-- The main module shows the connection between modules.

MODULE main
  VAR
    cabin : Cabin(ctrl.direction);
    door  : Door(ctrl.door_cmd, sensor);
    button_1 : Button(ctrl.reset_1);
    button_2 : Button(ctrl.reset_2);
    button_3 : Button(ctrl.reset_3);
    sensor : boolean;
    ctrl : CTRL(cabin.floor, door.status,
                button_1.pressed, button_2.pressed,
                button_3.pressed, sensor);



---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

  DEFINE isNoButtonPressed := (!button_1.pressed & !button_2.pressed & !button_3.pressed);

  -- Other modifications in the controller may be needed to prevent endless loops between the sensor and the floor button being active repeatedly.
  -- We added a check to only make it possible for the sensor to be active when the door is open. this solved the problem of the endless looping.


  -- The controller must satisfy the following requirements.

  -- Fairness: The sensor is never tripped indefinitely.
  FAIRNESS
    sensor = FALSE;


  -- REQ: No button can reach a state where it remains pressed forever.
  LTLSPEC G( button_1.pressed ->  F !button_1.pressed);
  LTLSPEC G( button_2.pressed ->  F !button_2.pressed);
  LTLSPEC G( button_3.pressed ->  F !button_3.pressed);
  -- REQ: No pressed button can be reset until the cabin stops at the
  --      corresponding floor and opens the door.
  LTLSPEC G( cabin.floor = 1 & button_1.pressed & ctrl.direction = stop & door.status = open  ->  (ctrl.reset_1)  );
  LTLSPEC G( cabin.floor = 2 & button_2.pressed & ctrl.direction = stop & door.status = open  ->  (ctrl.reset_2)  );
  LTLSPEC G( cabin.floor = 3 & button_3.pressed & ctrl.direction = stop & door.status = open  ->  (ctrl.reset_3)  );

  -- REQ: A button must be reset as soon as the cabin stops at the
  --      corresponding floor with the door open.
  LTLSPEC G ( cabin.direction = stop & cabin.floor = 1 & door.status = open & !isNoButtonPressed ->  (ctrl.reset_1) = TRUE ) ;
  LTLSPEC G ( cabin.direction = stop & cabin.floor = 2 & door.status = open & !isNoButtonPressed ->  (ctrl.reset_2) = TRUE ) ;
  LTLSPEC G ( cabin.direction = stop & cabin.floor = 3 & door.status = open & !isNoButtonPressed ->  (ctrl.reset_3) = TRUE ) ;

  -- REQ: The cabin can move only when the door is closed.
 LTLSPEC G( cabin.direction = down -> door.status = closed);
 LTLSPEC G( cabin.direction = up -> door.status = closed);
  -- REQ: If no button is pressed, the controller must issue no commands
  --      and the cabin must be stopped.
 LTLSPEC G( isNoButtonPressed = TRUE & cabin.floor = 1 & door.status = open -> cabin.direction = stop & ctrl.door_cmd = nop);

---------------------------------------------------------------------------